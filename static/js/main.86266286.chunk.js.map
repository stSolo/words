{"version":3,"sources":["header/Header.js","description/Description.js","main-block/MainBlock.js","App.js","serviceWorker.js","index.js"],"names":["Header","Description","className","words","word","getRandomInt","min","max","Math","ceil","floor","random","MainBlock","props","state","alphabet","char","clicked","playerWord","currentWord","lives","n","length","w","console","log","n_w","p_w","i","push","this","setState","map","item","onClick","checkChar","bind","value","disabled","key","e","currentTarget","c_w","newAlphabet","indexesOfChar","reduce","a","gameStartAgain","index","drawKeyBoard","drawWord","title","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86266286.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Header(){\r\n    return (\r\n        <h2>\r\n            Добро пожаловать в Words!\r\n        </h2>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function Description(){\r\n    return (\r\n        <p className = \"description\">\r\n            Псс... я загадал некоторое слово, попробуешь угадать?\r\n        </p>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport './main-block.css';\r\n\r\nlet words = [\r\n    {\r\n        word: \"яблоко\"\r\n    },\r\n    {\r\n        word: \"тушенка\"\r\n    },\r\n    {\r\n        word: \"любовь\"\r\n    },\r\n    {\r\n        word: \"морковь\"\r\n    },\r\n    {\r\n        word: \"мама\"\r\n    },\r\n    {\r\n        word: \"папа\"\r\n    },\r\n    {\r\n        word: \"дочь\"\r\n    },\r\n    {\r\n        word: \"пакет\"\r\n    },\r\n    {\r\n        word: \"магазин\"\r\n    },\r\n    {\r\n        word: \"семьч\"\r\n    },\r\n    {\r\n        word: \"бабушка\"\r\n    },\r\n    {\r\n        word: \"дедушка\"\r\n    },\r\n    {\r\n        word: \"дом\"\r\n    },\r\n    {\r\n        word: \"дух\"\r\n    },\r\n    {\r\n        word: \"душ\"\r\n    },\r\n    {\r\n        word: \"сын\"\r\n    },\r\n    {\r\n        word: \"картофель\"\r\n    },\r\n    {\r\n        word: \"котлета\"\r\n    },\r\n    {\r\n        word: \"брат\"\r\n    },\r\n    {\r\n        word: \"сестра\"\r\n    },\r\n    {\r\n        word: \"соня\"\r\n    },\r\n    {\r\n        word: \"катя\"\r\n    },\r\n    {\r\n        word: \"красота\"\r\n    },\r\n    {\r\n        word: \"чипсы\"\r\n    },\r\n    {\r\n        word: \"лол\"\r\n    },\r\n    {\r\n        word: \"конфета\"\r\n    },\r\n    {\r\n        word: \"пирожок\"\r\n    },\r\n    {\r\n        word: \"булочка\"\r\n    },\r\n    {\r\n        word: \"швабра\"\r\n    },\r\n    {\r\n        word: \"кукла\"\r\n    },\r\n];\r\n\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //Максимум не включается, минимум включается\r\n  }\r\n\r\n\r\nexport default class MainBlock extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            alphabet: [\r\n                {\r\n                    char: \"а\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"б\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"в\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"г\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"д\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"е\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ё\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ж\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"з\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"и\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"й\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"к\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"л\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"м\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"н\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"о\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"п\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"р\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"с\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"т\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"у\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ф\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"х\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ц\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ч\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ш\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"щ\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ъ\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ы\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ь\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"э\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"ю\",\r\n                    clicked: false\r\n                },\r\n                {\r\n                    char: \"я\",\r\n                    clicked: false\r\n                },\r\n            ],\r\n            playerWord: [],\r\n            currentWord: [],\r\n            lives: 10,\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        let n = getRandomInt(0, words.length);\r\n        let w = words[n].word;\r\n        console.log(w);\r\n        let n_w = [];\r\n        let p_w = [];\r\n        for(let i = 0; i < w.length; i++){\r\n            n_w.push(w[i]);\r\n            p_w.push(\"_\");\r\n        };\r\n        this.setState({ currentWord: n_w,\r\n                        playerWord: p_w });\r\n    }\r\n\r\n    drawKeyBoard(){\r\n        return [...this.state.alphabet.map(item => {\r\n            return (<button\r\n                    onClick = {this.checkChar.bind(this)}\r\n                    value = {item.char}\r\n                    disabled = {(item.clicked)}\r\n\r\n                    key = {item.char}>{item.char}</button>)})]\r\n    }\r\n\r\n    checkChar(e){\r\n        let char = e.currentTarget.value;\r\n        let lives = this.state.lives;\r\n        let c_w = this.state.currentWord;\r\n        let p_w = this.state.playerWord;\r\n        let newAlphabet = [...this.state.alphabet.map(\r\n            item => {\r\n                if(item.char === char){\r\n                    item.clicked = true;\r\n                }\r\n                return item;\r\n            }\r\n        )]\r\n        let indexesOfChar = [...c_w.reduce((a,item,i) => {\r\n            if(char === item)\r\n                a.push(i);\r\n            return a;\r\n        }, [])];\r\n        if(indexesOfChar.length > 0){\r\n            indexesOfChar.map((item) => {\r\n                p_w[item] = char;\r\n            })\r\n        } else {\r\n            lives = lives-1;\r\n        }\r\n        this.setState({ alphabet: newAlphabet, \r\n                        currentWord: c_w,\r\n                        playerWord: p_w,\r\n                        lives: lives});\r\n        if(lives <= 0){\r\n            this.gameStartAgain();\r\n        }\r\n        }\r\n    \r\n    drawWord(){\r\n        let word = this.state.playerWord;\r\n        return (\r\n            word.map((char, index) => {\r\n                return <div className = \"char\"\r\n                key = {index}>{char}</div>\r\n            })\r\n        )\r\n    }\r\n\r\n    gameStartAgain(){\r\n        let alphabet = [...this.state.alphabet.map(item => {\r\n            item.clicked = false;\r\n            return item;\r\n        })];\r\n        let n = getRandomInt(0, words.length);\r\n        let w = words[n].word;\r\n        console.log(w);\r\n        let n_w = [];\r\n        let p_w = [];\r\n        for(let i = 0; i < w.length; i++){\r\n            n_w.push(w[i]);\r\n            p_w.push(\"_\");\r\n        };\r\n\r\n        this.setState({ playerWord: p_w,\r\n                        currentWord: n_w, \r\n                        alphabet: alphabet,\r\n                        lives: 10})\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.drawKeyBoard()}\r\n                <div className = \"word-container\">\r\n                    {this.drawWord()}\r\n                </div>\r\n                {this.state.lives}\r\n                <div>\r\n                    <button\r\n                    title = \"Еще!\"\r\n                    onClick = {this.gameStartAgain.bind(this)}>\r\n                        Еще!\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};","import React from 'react';\nimport Header from './header/Header';\nimport Description from './description/Description';\nimport MainBlock from './main-block/MainBlock';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Description />\n      <MainBlock />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}